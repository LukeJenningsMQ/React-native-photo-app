{"ast":null,"code":"import Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { useNavigation } from '@react-navigation/native';\nimport { Formik } from 'formik';\nimport AppColours from \"../configs/AppColours\";\nimport AppButton from \"../components/AppButton\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport AppText from \"../components/AppText\";\nimport DataManager from \"../configs/DataManager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nvar schema = Yup.object().shape({\n  user: Yup.string().required().min(1).label(\"Name\"),\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).max(8).label(\"Password\")\n});\nvar validateUser = function validateUser(_ref) {\n  var email = _ref.email,\n    password = _ref.password;\n  var commonData = DataManager.getInstance();\n  var list = commonData.getAllUsers();\n  return list.filter(function (user) {\n    return user.email === email;\n  }).length > 0;\n};\nfunction RegisterScreen(_ref2) {\n  var navigation = _ref2.navigation;\n  var addUser = function addUser(_ref3) {\n    var user = _ref3.user,\n      email = _ref3.email,\n      password = _ref3.password;\n    var commonData = DataManager.getInstance();\n    var userList = commonData.getAllUsers();\n    var userID = userList.length + 1;\n    var newUser = {\n      id: userID,\n      name: user,\n      email: email,\n      password: password\n    };\n    commonData.addUser(newUser);\n  };\n  return _jsxs(AppScreen, {\n    style: styles.container,\n    children: [_jsx(Image, {\n      style: styles.logo,\n      source: require(\"../assets/Photos/Logo.png\")\n    }), _jsx(Formik, {\n      initialValues: {\n        user: '',\n        email: '',\n        password: ''\n      },\n      onSubmit: function onSubmit(values, _ref4) {\n        var resetForm = _ref4.resetForm;\n        if (validateUser(values)) {\n          resetForm();\n          alert(\"Account Already Created For This Email\");\n        } else {\n          addUser(values);\n          console.log(values);\n          resetForm();\n          navigation.navigate(\"LogIn\");\n        }\n      },\n      validationSchema: schema,\n      children: function children(_ref5) {\n        var values = _ref5.values,\n          handleChange = _ref5.handleChange,\n          handleSubmit = _ref5.handleSubmit,\n          errors = _ref5.errors,\n          setFieldTouched = _ref5.setFieldTouched,\n          touched = _ref5.touched;\n        return _jsx(_Fragment, {\n          children: _jsxs(View, {\n            style: styles.container,\n            children: [_jsx(AppTextInput, {\n              autoCapitalize: \"none\",\n              autoCorrect: false,\n              icon: \"face\",\n              placeholder: \"Name\",\n              keyboardType: \"email-address\",\n              value: values.user,\n              onBlur: function onBlur() {\n                return setFieldTouched;\n              },\n              onChangeText: handleChange(\"user\")\n            }), touched.user && _jsx(AppText, {\n              style: {\n                color: '#FF0000',\n                fontSize: 15\n              },\n              children: errors.user\n            }), _jsx(AppTextInput, {\n              autoCapitalize: \"none\",\n              autoCorrect: false,\n              icon: \"email\",\n              placeholder: \"Email Address\",\n              keyboardType: \"email-address\",\n              textContentType: \"emailAddress\",\n              value: values.email,\n              onBlur: function onBlur() {\n                return setFieldTouched;\n              },\n              onChangeText: handleChange(\"email\")\n            }), touched.email && _jsx(AppText, {\n              style: {\n                color: '#FF0000',\n                fontSize: 15\n              },\n              children: errors.email\n            }), _jsx(AppTextInput, {\n              autoCapitalize: \"none\",\n              autoCorrect: false,\n              icon: \"lock\",\n              placeholder: \"Password\",\n              secureTextEntry: true,\n              textContentType: \"password\",\n              value: values.password,\n              onBlur: function onBlur() {\n                return setFieldTouched;\n              },\n              onChangeText: handleChange(\"password\")\n            }), touched.password && _jsx(AppText, {\n              style: {\n                color: '#FF0000',\n                fontSize: 15\n              },\n              children: errors.password\n            }), _jsx(AppButton, {\n              title: \"Register\",\n              onPress: handleSubmit\n            })]\n          })\n        });\n      }\n    }), _jsx(AppButton, {\n      title: \"back\",\n      onPress: function onPress() {\n        return navigation.navigate(\"Welcome\");\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: AppColours.primaryColour,\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 40,\n    color: 'red',\n    fontWeight: 'bold',\n    fontStyle: 'italic'\n  },\n  logo: {\n    height: 255,\n    alignSelf: 'center',\n    width: 220,\n    marginTop: 20,\n    marginBottom: 25\n  }\n});\nexport default RegisterScreen;","map":{"version":3,"names":["React","Yup","useNavigation","Formik","AppColours","AppButton","AppScreen","AppTextInput","AppText","DataManager","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","schema","object","shape","user","string","required","min","label","email","password","max","validateUser","_ref","commonData","getInstance","list","getAllUsers","filter","length","RegisterScreen","_ref2","navigation","addUser","_ref3","userList","userID","newUser","id","name","style","styles","container","children","Image","logo","source","require","initialValues","onSubmit","values","_ref4","resetForm","alert","console","log","navigate","validationSchema","_ref5","handleChange","handleSubmit","errors","setFieldTouched","touched","View","autoCapitalize","autoCorrect","icon","placeholder","keyboardType","value","onBlur","onChangeText","color","fontSize","textContentType","secureTextEntry","title","onPress","StyleSheet","create","flex","backgroundColor","primaryColour","alignItems","text","fontWeight","fontStyle","height","alignSelf","width","marginTop","marginBottom"],"sources":["C:/Users/lukej/Desktop/Web2022/poo/AwesomeP/app/Screens/RegisterScreen.js"],"sourcesContent":["import {Text, View, StyleSheet, Image} from 'react-native';\r\nimport React from 'react';\r\nimport * as Yup from 'yup';\r\nimport {useNavigation} from '@react-navigation/native';\r\nimport { Formik } from 'formik';\r\n\r\nimport AppColours from '../configs/AppColours';\r\nimport AppButton from '../components/AppButton';\r\nimport AppScreen from '../components/AppScreen';\r\nimport AppTextInput from '../components/AppTextInput';\r\nimport AppText from '../components/AppText';\r\nimport DataManager from '../configs/DataManager';\r\n\r\nconst schema = Yup.object().shape(\r\n  {\r\n    user:  Yup.string().required().min(1).label(\"Name\"),\r\n    email: Yup.string().required().email().label(\"Email\"),\r\n    password: Yup.string().required().min(4).max(8).label(\"Password\"),\r\n  }\r\n);\r\n\r\nconst validateUser = ({email,password}) => {\r\n  let commonData = DataManager.getInstance();\r\n  let list = commonData.getAllUsers();\r\n  return(\r\n    list.filter((user) => user.email === email).length > 0\r\n  );\r\n};\r\n\r\nfunction RegisterScreen({navigation}) {\r\n  \r\n  const addUser = ({user,email,password}) => {\r\n    let commonData = DataManager.getInstance();\r\n    const userList = commonData.getAllUsers();\r\n    const userID = userList.length+1;\r\n    const newUser = {\r\n            id: userID,\r\n            name:user,\r\n            email:email,\r\n            password:password,\r\n    }\r\n    commonData.addUser(newUser); \r\n  }\r\n  return (\r\n    <AppScreen style={styles.container}>\r\n      <Image style={styles.logo} source={require('../assets/Photos/Logo.png')}/>\r\n      <Formik\r\n        initialValues={{user:'',email:'',password:''}}\r\n        onSubmit = {(values, {resetForm})=> {\r\n          if(validateUser(values)){\r\n            resetForm();\r\n            alert(\"Account Already Created For This Email\")\r\n          }\r\n          else {\r\n            addUser(values)\r\n            console.log(values);\r\n            resetForm();\r\n            navigation.navigate(\"LogIn\");\r\n          }\r\n            \r\n        }}\r\n        validationSchema ={schema}>\r\n        {({values, handleChange, handleSubmit,errors,setFieldTouched,touched})=>(\r\n\r\n          <>\r\n          <View style={styles.container}>\r\n        <AppTextInput \r\n        autoCapitalize='none'\r\n        autoCorrect={false}\r\n        icon='face' \r\n        placeholder='Name'\r\n        keyboardType='email-address'\r\n        value={values.user}\r\n        onBlur={()=>setFieldTouched}\r\n        onChangeText={handleChange(\"user\")}\r\n      />\r\n               {touched.user && <AppText style={{color:'#FF0000', fontSize:15}}>{errors.user}</AppText>}\r\n \r\n                  <AppTextInput \r\n            autoCapitalize='none'\r\n            autoCorrect={false}\r\n            icon='email' \r\n            placeholder='Email Address'\r\n            keyboardType='email-address'\r\n            textContentType='emailAddress'\r\n            value={values.email}\r\n            onBlur={()=>setFieldTouched}\r\n            onChangeText={handleChange(\"email\")}\r\n            />\r\n          {touched.email && <AppText style={{color:'#FF0000', fontSize:15}}>{errors.email}</AppText>}\r\n          <AppTextInput \r\n          autoCapitalize='none'\r\n          autoCorrect={false}\r\n          icon='lock' \r\n          placeholder='Password'\r\n          secureTextEntry\r\n          textContentType='password'\r\n          value={values.password}\r\n          onBlur={()=>setFieldTouched}\r\n          onChangeText={handleChange(\"password\")}\r\n          />    \r\n          {touched.password && <AppText style={{color:'#FF0000', fontSize:15}}>{errors.password}</AppText>}\r\n      <AppButton title='Register' onPress={handleSubmit}></AppButton>\r\n          </View>\r\n          \r\n          </>\r\n        )\r\n      }\r\n      </Formik> \r\n      <AppButton title='back' onPress={() => navigation.navigate(\"Welcome\")}></AppButton>\r\n    </AppScreen>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: AppColours.primaryColour,\r\n        alignItems: 'center',\r\n      },\r\n      text:{\r\n        fontSize: 40,\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n        fontStyle:'italic',\r\n      },\r\n      logo:{\r\n        height:255,\r\n        alignSelf:'center',\r\n        width: 220,\r\n        marginTop: 20,\r\n        marginBottom: 25,\r\n      },\r\n})\r\nexport default RegisterScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}