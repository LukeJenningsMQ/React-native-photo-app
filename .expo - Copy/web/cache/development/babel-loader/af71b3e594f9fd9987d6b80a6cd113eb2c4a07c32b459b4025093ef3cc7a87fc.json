{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport React, { useState, Component } from 'react';\nimport { useNavigation } from '@react-navigation/native';\nimport AppPicker from \"../components/AppPicker\";\nimport AppIcon from \"../components/AppIcon\";\nimport AppColours from \"../configs/AppColours\";\nimport AppButton from \"../components/AppButton\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppCard from \"../components/AppCard\";\nimport DataManager from \"../configs/DataManager\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar collections = [{\n  icon: 'apps',\n  label: 'All',\n  value: 1\n}, {\n  icon: 'sunglasses',\n  label: 'Holidays',\n  value: 2\n}, {\n  icon: 'airballoon',\n  label: 'Outdoor',\n  value: 3\n}, {\n  icon: 'book-open-variant',\n  label: 'School',\n  value: 4\n}, {\n  icon: 'pine-tree',\n  label: 'Christmas',\n  value: 5\n}, {\n  icon: 'moon-waning-crescent',\n  label: 'Night Out',\n  value: 6\n}, {\n  icon: 'white-balance-sunny',\n  label: 'Day Out',\n  value: 7\n}, {\n  icon: 'home',\n  label: 'Indoor',\n  value: 8\n}];\nvar getMemories = function getMemories() {\n  var commonData = DataManager.getInstance();\n  var user = commonData.getUserID();\n  return commonData.getMemoryID(user);\n};\nvar getMemoriesCollection = function getMemoriesCollection(category) {\n  var commonData = DataManager.getInstance();\n  var user = commonData.getUserID();\n  if (category.label === '') {\n    return commonData.getMemoryID(user);\n  }\n  if (category.label === 'All') {\n    return commonData.getMemoryID(user);\n  } else {\n    return commonData.getMemoryCat(user, category.label);\n  }\n};\nfunction MemoriesScreen(_ref) {\n  var navigation = _ref.navigation;\n  var _useState = useState(getMemories()),\n    _useState2 = _slicedToArray(_useState, 2),\n    memoryList = _useState2[0],\n    setMemoryList = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    refreshing = _useState4[0],\n    setRefreshing = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    collection = _useState6[0],\n    setCollection = _useState6[1];\n  var handleDelete = function handleDelete(Memory) {\n    var commonData = DataManager.getInstance();\n    commonData.handleDelete(Memory);\n    setMemoryList(getMemoriesCollection(collection));\n  };\n  var commonData = DataManager.getInstance();\n  return _jsxs(AppScreen, {\n    style: styles.container,\n    children: [_jsx(AppPicker, {\n      selectedItem: collection,\n      onSelectedItem: function onSelectedItem(item) {\n        setCollection(item);\n        setMemoryList(getMemoriesCollection(item));\n      },\n      data: collections,\n      icon: \"apps\",\n      placeholder: \"Collections\"\n    }), _jsx(FlatList, {\n      data: memoryList,\n      keyExtractor: function keyExtractor(Memory) {\n        return Memory.id.toString();\n      },\n      refreshing: refreshing,\n      onRefresh: function onRefresh() {\n        return getMemories(), _readOnlyError(\"memoryList\");\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(AppCard, {\n          title: item.title,\n          subtitle: item.subtitle,\n          image: item.image,\n          onSwipeLeft: function onSwipeLeft() {\n            return _jsx(View, {\n              style: styles.deleteView,\n              children: _jsx(TouchableOpacity, {\n                onPress: function onPress() {\n                  return handleDelete(item);\n                },\n                children: _jsx(AppIcon, {\n                  name: \"trash-can\",\n                  backgroundColor: AppColours.secondaryColour\n                })\n              })\n            });\n          }\n        });\n      }\n    }), _jsx(AppButton, {\n      title: \"back\",\n      onPress: function onPress() {\n        return navigation.navigate(\"Home\");\n      }\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: AppColours.primaryColour,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  deleteView: {\n    width: 75,\n    backgroundColor: AppColours.primaryColour,\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 40,\n    color: 'red',\n    fontWeight: 'bold',\n    fontStyle: 'italic'\n  },\n  logo: {\n    height: 255,\n    width: 220,\n    marginBottom: 25\n  }\n});\nexport default MemoriesScreen;","map":{"version":3,"names":["React","useState","Component","useNavigation","AppPicker","AppIcon","AppColours","AppButton","AppScreen","AppCard","DataManager","jsx","_jsx","jsxs","_jsxs","collections","icon","label","value","getMemories","commonData","getInstance","user","getUserID","getMemoryID","getMemoriesCollection","category","getMemoryCat","MemoriesScreen","_ref","navigation","_useState","_useState2","_slicedToArray","memoryList","setMemoryList","_useState3","_useState4","refreshing","setRefreshing","_useState5","_useState6","collection","setCollection","handleDelete","Memory","style","styles","container","children","selectedItem","onSelectedItem","item","data","placeholder","FlatList","keyExtractor","id","toString","onRefresh","_readOnlyError","renderItem","_ref2","title","subtitle","image","onSwipeLeft","View","deleteView","TouchableOpacity","onPress","name","backgroundColor","secondaryColour","navigate","StyleSheet","create","flex","primaryColour","alignItems","justifyContent","width","text","fontSize","color","fontWeight","fontStyle","logo","height","marginBottom"],"sources":["C:/Users/lukej/Desktop/Web2022/poo/AwesomeP/app/Screens/MemoriesScreen.js"],"sourcesContent":["import {TouchableOpacity,FlatList, Text, View, StyleSheet, Image} from 'react-native';\r\nimport React, { useState, Component } from 'react';\r\nimport {useNavigation} from '@react-navigation/native';\r\n\r\nimport AppPicker from '../components/AppPicker';\r\nimport AppIcon from '../components/AppIcon';\r\nimport AppColours from '../configs/AppColours';\r\nimport AppButton from '../components/AppButton';\r\nimport AppScreen from '../components/AppScreen';\r\nimport AppCard from '../components/AppCard';\r\nimport DataManager from '../configs/DataManager';\r\n\r\n\r\n//These will be used for filtering which type of photots the user wnts\r\nconst collections = [\r\n  {icon:'apps', label:'All', value:1},\r\n  {icon:'sunglasses',label:'Holidays', value:2},\r\n  {icon:'airballoon',label:'Outdoor', value:3},\r\n  {icon:'book-open-variant',label:'School', value:4},\r\n  {icon:'pine-tree',label:'Christmas', value:5},\r\n  {icon:'moon-waning-crescent',label:'Night Out', value:6},\r\n  {icon:'white-balance-sunny',label:'Day Out', value:7},\r\n  {icon:'home',label:'Indoor', value:8},\r\n]\r\n\r\n//get all memories for a particular suer\r\nconst getMemories = () => {\r\n  let commonData = DataManager.getInstance();\r\n  let user = commonData.getUserID();\r\n  return commonData.getMemoryID(user);\r\n}\r\n//get Memories depending on category\r\nconst getMemoriesCollection = (category) => {\r\n  let commonData = DataManager.getInstance();\r\n  let user = commonData.getUserID();\r\n  if(category.label === ''){\r\n    return commonData.getMemoryID(user);\r\n  }\r\n  if(category.label === 'All'){\r\n    return commonData.getMemoryID(user);\r\n  } else{\r\n  return commonData.getMemoryCat(user,category.label);\r\n  }\r\n}\r\n\r\nfunction MemoriesScreen({navigation}) {\r\n  const [memoryList, setMemoryList] = useState(getMemories());\r\n  const [refreshing, setRefreshing] = useState(false);\r\n  const [collection, setCollection] = useState('');\r\n  const handleDelete = (Memory) => {\r\n    let commonData = DataManager.getInstance();\r\n    commonData.handleDelete(Memory);\r\n    setMemoryList(getMemoriesCollection(collection));\r\n  }\r\n  let commonData = DataManager.getInstance();\r\n  return (\r\n    <AppScreen style={styles.container}>\r\n        <AppPicker selectedItem = {collection} onSelectedItem={item=> {setCollection(item); setMemoryList(getMemoriesCollection(item))}} data={collections} icon='apps' placeholder='Collections'></AppPicker>\r\n        <FlatList\r\n            data = {memoryList}\r\n            keyExtractor = { Memory => Memory.id.toString()}\r\n            refreshing = {refreshing}\r\n            onRefresh = {() => memoryList = getMemories()}\r\n            renderItem = {({item}) =>\r\n                <AppCard title={item.title} subtitle={item.subtitle} image={item.image}\r\n                //Swipe left to get options for deleting a photo\r\n                onSwipeLeft={ () => (<View style={styles.deleteView}><TouchableOpacity onPress={() => handleDelete(item)}><AppIcon name='trash-can' backgroundColor={AppColours.secondaryColour}/></TouchableOpacity></View>)}/>}\r\n        />\r\n        <AppButton title='back' onPress={() => navigation.navigate(\"Home\")}></AppButton>\r\n    </AppScreen>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        backgroundColor: AppColours.primaryColour,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n      },\r\n      deleteView:{\r\n        width:75,\r\n        backgroundColor: AppColours.primaryColour,\r\n        justifyContent:'center',\r\n        alignItems:'center'\r\n      },\r\n      text:{\r\n        fontSize: 40,\r\n        color: 'red',\r\n        fontWeight: 'bold',\r\n        fontStyle:'italic',\r\n      },\r\n      logo:{\r\n        height:255,\r\n        width: 220,\r\n        marginBottom: 25,\r\n      },\r\n})\r\nexport default MemoriesScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}